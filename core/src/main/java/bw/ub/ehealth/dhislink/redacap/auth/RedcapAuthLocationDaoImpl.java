// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 05/25/2020 23:03:05+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.ub.ehealth.dhislink.redacap.auth;

import bw.ub.ehealth.dhislink.redacap.auth.vo.RedcapAuthLocationVO;

import java.util.Collection;

import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

/**
 * @see RedcapAuthLocation
 */
@Repository("redcapAuthLocationDao")
public class RedcapAuthLocationDaoImpl
    extends RedcapAuthLocationDaoBase
{
    /**
     * {@inheritDoc}
     */
    @Override
    public void toRedcapAuthLocationVO(
        RedcapAuthLocation source,
        RedcapAuthLocationVO target)
    {
        // TODO verify behavior of toRedcapAuthLocationVO
        super.toRedcapAuthLocationVO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedcapAuthLocationVO toRedcapAuthLocationVO(final RedcapAuthLocation entity)
    {
    	
        // TODO verify behavior of toRedcapAuthLocationVO
        return super.toRedcapAuthLocationVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private RedcapAuthLocation loadRedcapAuthLocationFromRedcapAuthLocationVO(RedcapAuthLocationVO redcapAuthLocationVO)
    {
        
        if (redcapAuthLocationVO.getId() == null)
        {
            return  RedcapAuthLocation.Factory.newInstance();
        }
        else
        {
            return this.load(redcapAuthLocationVO.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public RedcapAuthLocation redcapAuthLocationVOToEntity(RedcapAuthLocationVO redcapAuthLocationVO)
    {
        // TODO verify behavior of redcapAuthLocationVOToEntity
        RedcapAuthLocation entity = this.loadRedcapAuthLocationFromRedcapAuthLocationVO(redcapAuthLocationVO);
        this.redcapAuthLocationVOToEntity(redcapAuthLocationVO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void redcapAuthLocationVOToEntity(
        RedcapAuthLocationVO source,
        RedcapAuthLocation target,
        boolean copyIfNull)
    {
        // TODO verify behavior of redcapAuthLocationVOToEntity
        super.redcapAuthLocationVOToEntity(source, target, copyIfNull);
        if(source.getLocation() != null) {
        	target.setLocationId(source.getLocation().getId());
        }
        
        if(source.getRedcapAuth() != null) {
        	target.setRedcapAuthUsername(source.getRedcapAuth().getUsername());
        }
    }

	@Override
	protected RedcapAuthLocation handleFindAuthLocation(String username) throws Exception {
		String queryStr = "select al from "
				+ "RedcapAuthLocation al where al.authUsername = :username";
		Query query = entityManager.createQuery(queryStr);
		query.setParameter("username", username);
		
		try {
			return (RedcapAuthLocation) query.getSingleResult();
		} catch(NoResultException | NonUniqueResultException e) {
			return null;
		}
	}

	@Override
	protected Collection<RedcapAuth> handleFindLocationAuths(Long locationId) throws Exception {
		String queryStr = "select al from "
				+ "RedcapAuthLocation al where al.locationId = :locationId";
		Query query = entityManager.createQuery(queryStr);
		query.setParameter("locationId", locationId);
		// TODO Auto-generated method stub
		return query.getResultList();
	}
}