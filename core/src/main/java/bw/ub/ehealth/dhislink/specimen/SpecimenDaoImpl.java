// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on 05/01/2020 16:24:30+0200.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.ub.ehealth.dhislink.specimen;

import bw.ub.ehealth.dhislink.patient.Patient;
import bw.ub.ehealth.dhislink.patient.vo.PatientVO;
import bw.ub.ehealth.dhislink.specimen.vo.SpecimenVO;

import java.util.Collection;

import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.Query;

import org.springframework.stereotype.Repository;

/**
 * @see Specimen
 */
@Repository("specimenDao")
public class SpecimenDaoImpl
    extends SpecimenDaoBase
{

	
    /**
     * {@inheritDoc}
     */
    @Override
    protected Specimen handleFindByBarcode(String barcode)
    {
    	
    	Query query = entityManager.createQuery("select sp from bw.ub.ehealth.dhislink.specimen.Specimen sp where specimenBarcode = :barcode ");
    	query.setParameter("barcode", barcode);
    	
    	try {
			return (Specimen) query.getSingleResult();
		} catch (NoResultException | NonUniqueResultException e) {
			return null;
		}
    	    	
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toSpecimenVO(
        Specimen source,
        SpecimenVO target)
    {
        // TODO verify behavior of toSpecimenVO
        super.toSpecimenVO(source, target);
        // WARNING! No conversion for target.dispathDateTime (can't convert source.getDispathDateTime():java.util.Date to java.util.Date
        if(source.getCollectionDateTime() != null) {
        	
        	target.setCollectionDateTime(source.getCollectionDateTime());
        }
        // WARNING! No conversion for target.collectionDateTime (can't convert source.getCollectionDateTime():java.util.Date to java.util.Date
        if(source.getDispatchDateTime() != null) {
        	target.setDispatchDate(source.getDispatchDateTime());
        	target.setDispatchTime(source.getDispatchDateTime());
        }
        // WARNING! No conversion for target.patient (can't convert source.getPatient():bw.ub.ehealth.dhislink.patient.Patient to bw.ub.ehealth.dhislink.patient.vo.PatientVO

        if(source.getPatient() != null) {
        	PatientVO p = new PatientVO();
        	getPatientDao().toPatientVO(source.getPatient(), p);
        	
        	target.setPatient(p);
        }
        
        if(source.getReceivingDateTime() != null) {
        	target.setReceivingDateTime(source.getReceivingDateTime());
        }
        
        if(source.getResultsEnteredDate() != null) {
        	target.setResultsEnteredDate(source.getResultsEnteredDate());
        }
        
        if(source.getResultsVerifiedDate() != null) {
        	target.setResultsVerifiedDate(source.getResultsVerifiedDate());
        }

        if(source.getResultsAuthorisedDate() != null) {
        	target.setResultsAuthorisedDate(source.getResultsAuthorisedDate());
        }
        
        target.setCreated(source.getCreated());
        target.setLastUpdated(source.getLastUpdated());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SpecimenVO toSpecimenVO(final Specimen entity)
    {
        // TODO verify behavior of toSpecimenVO
        return super.toSpecimenVO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Specimen loadSpecimenFromSpecimenVO(SpecimenVO specimenVO)
    {
    	Specimen specimen = this.findByBarcode(specimenVO.getSpecimenBarcode());
    	
    	if(specimen == null || specimen.getId() == null) {
    		if(specimenVO.getId() != null) {
    			specimen = this.load(specimenVO.getId());
    		} else {

    	    	specimen = Specimen.Factory.newInstance();
    	    	
    		}
    	}
    	
    	return specimen;
    }

    /**
     * {@inheritDoc}
     */
    public Specimen specimenVOToEntity(SpecimenVO specimenVO)
    {
        Specimen entity = this.loadSpecimenFromSpecimenVO(specimenVO);
        this.specimenVOToEntity(specimenVO, entity, true);
        
        if(specimenVO.getPatient() != null) {
        	if(specimenVO.getPatient().getId() != null) {
        
        		entity.setPatient(getPatientDao().load(specimenVO.getPatient().getId()));
        	} else {
        		Patient p = getPatientDao().getPatientByIdentityNo(specimenVO.getPatient().getIdentityNo());
        		
        		if(p == null) {
        			p = getPatientDao().patientVOToEntity(specimenVO.getPatient());
        			p = getPatientDao().create(p);
        		}
        		
        		entity.setPatient(p);
        	}
        } 
        
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void specimenVOToEntity(
        SpecimenVO source,
        Specimen target,
        boolean copyIfNull)
    {
        // TODO verify behavior of specimenVOToEntity
        super.specimenVOToEntity(source, target, copyIfNull);
        // No conversion for target.dispathDateTime (can't convert source.getDispathDateTime():java.util.Date to java.util.Date
        
        if(source.getDispatchDate() != null && source.getDispatchTime() != null) {
        	        	
        	target.setDispatchDateTime(source.getDispatchTime());
        }
        // No conversion for target.collectionDateTime (can't convert source.getCollectionDateTime():java.util.Date to java.util.Date
        if(source.getCollectionDateTime() != null) {
        	target.setCollectionDateTime(source.getCollectionDateTime());
        }
        
        if(source.getReceivingDateTime() != null) {
        	target.setReceivingDateTime(source.getReceivingDateTime());
        }
        
        if(source.getResultsEnteredDate() != null) {
        	target.setResultsEnteredDate(source.getResultsEnteredDate());
        }
        
        if(source.getResultsVerifiedDate() != null) {
        	target.setResultsVerifiedDate(source.getResultsVerifiedDate());
        }
        
        if(source.getResultsAuthorisedDate() != null) {
        	target.setResultsAuthorisedDate(source.getResultsAuthorisedDate());
        }
        
        target.setCreated(source.getCreated());
        target.setLastUpdated(source.getLastUpdated());
    }

	@Override
	protected Specimen handleFindByEvent(String event) throws Exception {
		
		Query query = entityManager.createQuery("select s from bw.ub.ehealth.dhislink.specimen.Specimen s where s.event = '" + event + "'");
		
		try {
			return (Specimen) query.getSingleResult();
		} catch (NoResultException | NonUniqueResultException e) {
			return null;
		}
	}

	@Override
	protected Specimen handleFindLatestSpecimen(String programId) throws Exception {
		
		Query query = entityManager.createQuery("select sp from bw.ub.ehealth.dhislink.specimen.Specimen sp where sp.lastUpdated = "
    			+ "(select MAX(s1.lastUpdated) from bw.ub.ehealth.dhislink.specimen.Specimen s1 where (:programId is null or s1.programId = :programId))");
		query.setParameter("programId", programId);
		
		try {
			Specimen specimen = (Specimen) query.getSingleResult();
			return specimen;
		} catch (NoResultException | NonUniqueResultException e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	protected Collection<Specimen> handleFindUnsynchedSpecimen() throws Exception {
		
		Query query = entityManager.createQuery("select s from bw.ub.ehealth.dhislink.specimen.Specimen s "
				+ "where s.dhis2Synched = " + false);
		
		// TODO Auto-generated method stub
		return query.getResultList();
	}
}